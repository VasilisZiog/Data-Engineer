# below is stated how the pipeline will be triggered(when a change will happen in main branch)
trigger:
  - main

# in azure devops there is a variable group with the following name which contains variables that will be used for the deployment in each environment
variables:
  - group: group1

# Define runtime parameters
parameters:
  - name: integrationRuntimeKey
    displayName: "Integration Runtime Key"
    type: string
    default: ""
    
# the following are parameters that can be used anywhere in this yml code
  
#  - name: notebooksPath
#    value: "DLT_pipeline"
#  - name: location
#    value: "eastus"

# compute power that Microsoft provides to execute a CI/CD pipeline in devops (https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml)
pool: 
  name: vziog
  demands: agent.name -equals ZIOGOU-NB


# below are defined the stages
stages:

#stage 1: deployment of resources that are managed from resource manager part1
  - template: templates/run-bicep.yml
    parameters:
      stageid: "Deploy_part1_to_Dev_Environment"
      env: "dev"
# this is the environment of devops where you can manage deployments, view resource status, etc
      environmentName: $(dev-environment-name)
      resourceGroupName: $(dev-resource-group-name)
      location: $(location)
# this is the service connecion to the resource group where dev databricks workspace is (recommended type is service principal automatic through resource manager)
      serviceConnection: $(dev-service-connection-name)
      bicepTemplateFile: "Pipeline/ARM/main_part1.bicep"
      bicepParametersFile: "Pipeline/ARM/main_part1.bicepparam"

# Manual approval step before proceeding to the second stage
  - stage: "Approve_and_Configure_Integration_Runtime"
    displayName: "Approve and Configure Integration Runtime"
    dependsOn: Deploy_part1_to_Dev_Environment
    jobs:
      - job: ManualApproval
        displayName: "Manual Approval for Integration Runtime Configuration"
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: "Please input the Integration Runtime Key and approve the process."
              onTimeout: "reject"  # You can choose to auto-reject on timeout

      - job: ConfigureIntegrationRuntime
        displayName: "Configuring Integration Runtime"
        dependsOn: ManualApproval
        condition: succeeded('ManualApproval')  # Only run if manual approval succeeded
        steps:
          - checkout: self

          # PowerShell task for configuring the Integration Runtime
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(dev-service-connection-name)
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd $(Build.SourcesDirectory)/Pipeline/ARM

                # Use the runtime parameter provided in manual approval (for simplicity, using the pipeline parameter here)
                $integrationRuntimeKey = '${{ parameters.integrationRuntimeKey }}'

                # Pass the parameter value to the PowerShell script
                .\RegisterIntegrationRuntime2.ps1 -RuntimeKey $integrationRuntimeKey

                Write-Host "Integration Runtime configured with key: $integrationRuntimeKey"
