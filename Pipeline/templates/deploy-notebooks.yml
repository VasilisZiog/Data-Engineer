parameters: 
  - name: stageId
    type: string
  - name: dependsON
    type: object
    default: []
  - name: env
    type: string
  - name: environmentName
    type: string
  - name: resourceGroupName
    type: string
  - name: serviceConnection
    type: string
  - name: notebooksPath
    type: string

stages: 
  - stage: "${{ parameters.stageId }}"
    displayName: "Deploying to [${{upper(parameters.env)}}] Environment"
    dependsOn: ${{ parameters.dependson }}
    jobs:
      - deployment: Deploy
        displayName: "Deploying Databricks Notebooks"
        environment: ${{parameters.environmentName}}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                
                
                - task: AzureCLI@2
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: 'ps' 
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az config set extensionuse_dynamic_install=yes_without_prompt
                      az config set extension.allow_preview=true

                      $databricksWorkspace = (az resource list --resource-group ${{parameters.resourceGroupName}} --query "[?type=='Microsoft.Databricks/workspaces']" | ConvertFrom-Json)[0]
                      $databricksWorkspaceInfo = (az databricks workspace show --ids $databricksWorkspace.id | ConvertFrom-Json)
                      $bearerToken = $(Build.Repository.LocalPath)\CICD\scripts\DatabricksToken.ps1 -databricksWorkspaceResourceId $databricksWorkspaceInfo.id -databricksWorkspaceUrl $databricksWorkspaceInfo.workspaceUrl

                      Install-Module -Name azure.databricks.cicd.tools -Force -scope CurrentUser
                      Import-Module -Name azure.databricks.cicd.tools
                      Import-DatabricksFolder -BearerToken $bearerToken -Region $databricksWorkspaceInfo.location -LocalPath $(Build.Repository.LocalPath)/${{parameters.notebooksPath}} -DatabricksPath '/live' -Clean
